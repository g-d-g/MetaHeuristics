// Generated by CoffeeScript 1.6.3
var ackleys, booths, expect, matayas;

expect = require("expect.js");

ackleys = {
  makeRandomSolution: function() {
    return {
      x: -5 + Math.random() * 10,
      y: -5 + Math.random() * 10
    };
  },
  findNeighbour: function(point) {
    return {
      x: point.x + -.1 + Math.random() * .2,
      y: point.y + -.1 + Math.random() * .2
    };
  },
  recombine: function(mother, father) {
    return {
      x: mother.x,
      y: father.y
    };
  },
  mutate: function(original) {
    var rnd;
    rnd = Math.random();
    return {
      x: original.x + (rnd >= .5 ? -1 + Math.random() * 2 : 0),
      y: original.y + (rnd < .5 ? -1 + Math.random() * 2 : 0)
    };
  },
  fitness: function(point) {
    var x, y;
    x = point.x;
    y = point.y;
    return -20 * Math.exp(-.2 * Math.sqrt(.5 * (x * x + y * y))) - Math.exp(.5 * (Math.cos(2 * Math.PI * x) + Math.cos(2 * Math.PI * y))) + 20 + Math.E;
  }
};

matayas = {
  makeRandomSolution: function() {
    return {
      x: -10 + Math.random() * 20,
      y: -10 + Math.random() * 20
    };
  },
  findNeighbour: function(point) {
    return {
      x: point.x + -.1 + Math.random() * .2,
      y: point.y + -.1 + Math.random() * .2
    };
  },
  recombine: function(mother, father) {
    return {
      x: mother.x,
      y: father.y
    };
  },
  mutate: function(original) {
    var rnd;
    rnd = Math.random();
    return {
      x: original.x + (rnd >= .5 ? -5 + Math.random() * 10 : 0),
      y: original.y + (rnd < .5 ? -5 + Math.random() * 10 : 0)
    };
  },
  fitness: function(point) {
    var x, y;
    x = point.x;
    y = point.y;
    return .26 * (x * x + y * y) - .48 * x * y;
  }
};

booths = {
  makeRandomSolution: function() {
    return {
      x: -10 + Math.random() * 20,
      y: -10 + Math.random() * 20
    };
  },
  findNeighbour: function(point) {
    return {
      x: point.x + -.1 + Math.random() * .2,
      y: point.y + -.1 + Math.random() * .2
    };
  },
  recombine: function(mother, father) {
    return {
      x: mother.x,
      y: father.y
    };
  },
  mutate: function(original) {
    var rnd;
    rnd = Math.random();
    return {
      x: original.x + (rnd >= .5 ? -10 + Math.random() * 20 : 0),
      y: original.y + (rnd < .5 ? -10 + Math.random() * 20 : 0)
    };
  },
  fitness: function(point) {
    var x, y;
    x = point.x;
    y = point.y;
    return Math.pow(x + 2 * y - 7, 2) + Math.pow(2 * x + y - 5, 2);
  }
};

describe("SimulatedAnnealing", function() {
  var sa;
  sa = require("./../src/MetaHeuristics.coffee").SimulatedAnnealing;
  describe("run w Ackleys function", function() {
    return it("finds a global minimum at (0,0)", function(done) {
      return sa.run(ackleys).then(function(winner) {
        var e;
        try {
          expect(winner.x).to.be.within(-0.01, 0.01);
          expect(winner.y).to.be.within(-0.01, 0.01);
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
  describe("run w Matayas function", function() {
    return it("finds a global minimum at (0,0)", function(done) {
      return sa.run(matayas).then(function(winner) {
        var e;
        try {
          expect(winner.x).to.be.within(-0.01, 0.01);
          expect(winner.y).to.be.within(-0.01, 0.01);
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
  return describe("run w Booths function", function() {
    return it("finds a global minimum at (1,3)", function(done) {
      return sa.run(booths).then(function(winner) {
        var e;
        try {
          expect(winner.x).to.be.within(0.99, 1.01);
          expect(winner.y).to.be.within(2.99, 3.01);
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
});

describe("Evolution", function() {
  var evolution;
  evolution = require("./../src/MetaHeuristics.coffee").Evolution;
  describe("run w Ackleys function", function() {
    return it("finds a global minimum at (0,0)", function(done) {
      return evolution.run(ackleys).then(function(winner) {
        var e;
        try {
          expect(winner.x).to.be.within(-0.01, 0.01);
          expect(winner.y).to.be.within(-0.01, 0.01);
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
  describe("run w Matayas function", function() {
    return it("finds a global minimum at (0,0)", function(done) {
      return evolution.run(matayas).then(function(winner) {
        var e;
        try {
          expect(winner.x).to.be.within(-0.01, 0.01);
          expect(winner.y).to.be.within(-0.01, 0.01);
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
  return describe("run w Booths function", function() {
    return it("finds a global minimum at (1,3)", function(done) {
      return evolution.run(booths).then(function(winner) {
        var e;
        try {
          expect(winner.x).to.be.within(0.99, 1.01);
          expect(winner.y).to.be.within(2.99, 3.01);
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
});
